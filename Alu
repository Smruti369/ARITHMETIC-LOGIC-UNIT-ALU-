`timescale 1ns/1ns

module alu4 (
    input  [3:0] A, B,
    input  [2:0] op,       // 000=add, 001=sub, 010=and, 011=or, 100=not A
    output reg [3:0] Y
);
    always @(*) begin
        case (op)
            3'b000: Y = A + B;
            3'b001: Y = A - B;
            3'b010: Y = A & B;
            3'b011: Y = A | B;
            3'b100: Y = ~A;
            default: Y = 4'b0000;
        endcase
    end
endmodule


Testbanch
`timescale 1ns/1ns

module tb_alu4;
    reg  [3:0] A, B;
    reg  [2:0] op;
    wire [3:0] Y;
    alu4 DUT (.A(A), .B(B), .op(op), .Y(Y));

    initial begin
        $dumpfile("alu4.vcd");
        $dumpvars(0, tb_alu4);

        // test all operations with sample inputs
        A = 4'd3; B = 4'd1;
        op = 3'b000; #10; // add
        op = 3'b001; #10; // sub
        op = 3'b010; #10; // and
        op = 3'b011; #10; // or
        op = 3'b100; #10; // not A

        // more testing
        A = 4'b1010; B = 4'b0101; op = 3'b000; #10;  // add
        op = 3'b001; #10;  // sub

        #10 $finish;
    end
endmodule
